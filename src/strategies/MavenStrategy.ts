import {existsSync, readFileSync, unlinkSync, writeFileSync} from 'fs';
import {join} from 'path';
import {
  executionTestClassName,
  neededDependencies,
} from '../constants/TestConstants';
import {BuildToolStrategy} from './BuildToolStrategy';

export class MavenStrategy implements BuildToolStrategy {
  buildTool = 'maven';
  public exec(projectPath: string, modulePath: string): void {
    let data = readFileSync(join(projectPath, modulePath, 'pom.xml'), 'utf-8');

    const dependenciesBlockIdentificator = '<dependencies>';
    let dependenciesBlockIndex = data.indexOf(dependenciesBlockIdentificator);
    if (dependenciesBlockIndex === -1) {
      dependenciesBlockIndex = data.indexOf('</project>');
      data =
        data.substring(0, dependenciesBlockIndex) +
        '<dependencies></dependencies>' +
        data.substring(dependenciesBlockIndex);
      dependenciesBlockIndex = data.indexOf(dependenciesBlockIdentificator);
    }
    dependenciesBlockIndex += dependenciesBlockIdentificator.length;

    neededDependencies.forEach(dependency => {
      const dependecyPosition = data.indexOf(
        dependency.artifactId,
        dependenciesBlockIndex
      );
      if (dependecyPosition == -1) {
        data =
          data.substring(0, dependenciesBlockIndex) +
          `<dependency>
          <groupId>${dependency.groupId}</groupId>
          <artifactId>${dependency.artifactId}</artifactId>
          <version>${dependency.version}</version>
          <scope>test</scope>
        </dependency>` +
          data.substring(dependenciesBlockIndex);
      }
    });

    const profilesBlockIdentificator = '<profiles>';
    let profilesBlockIndex = data.indexOf(profilesBlockIdentificator);

    if (profilesBlockIndex === -1) {
      data = data.replace(
        '</project>',
        `
  \n<!-- GENERATED BY FLAKYINFR -->
  \n<profiles>
    <profile>
      <id>runFlakyTest</id>
      <activation>
        <property>
          <name>runFlakyTest</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <configuration>
              <executable>java</executable>
              <classpathScope>test</classpathScope>
              <mainClass>${executionTestClassName}</mainClass>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
  </project>
      `
      );
    } else {
      profilesBlockIndex += profilesBlockIdentificator.length;
      data =
        data.substring(0, profilesBlockIndex) +
        `<profile>
          <id>runFlakyTest</id>
          <activation>
            <property>
              <name>runFlakyTest</name>
            </property>
          </activation>
          <build>
            <plugins>
              <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <configuration>
                  <executable>java</executable>
                  <classpathScope>test</classpathScope>
                  <mainClass>${executionTestClassName}</mainClass>
                </configuration>
              </plugin>
            </plugins>
          </build>
        </profile>` +
        data.substring(profilesBlockIndex);
    }

    writeFileSync(join(projectPath, modulePath, 'pom.xml'), data, 'utf-8');

    // if (existsSync(join(projectPath, 'mvnw'))) {
    //   unlinkSync(join(projectPath, 'mvnw'));
    //   unlinkSync(join(projectPath, 'mvnw.cmd'));
    // }

    // writeFileSync(
    //   join(projectPath, 'system.properties'),
    //   `maven.version=3.8.6`,
    //   'utf-8'
    // );
    writeFileSync(
      join(projectPath, 'Procfile'),
      `web: ./mvnw -pl ${modulePath} exec:java -PrunFlakyTest`,
      'utf-8'
    );
  }
}
