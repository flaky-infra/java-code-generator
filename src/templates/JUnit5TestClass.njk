//CHECKSTYLE:OFF

import static org.junit.platform.engine.discovery.DiscoverySelectors.selectClass;
import static org.junit.platform.engine.discovery.DiscoverySelectors.selectMethod;

import com.martensigwart.fakeload.FakeLoad;
import com.martensigwart.fakeload.FakeLoadExecutor;
import com.martensigwart.fakeload.FakeLoadExecutors;
import com.martensigwart.fakeload.FakeLoads;
import com.martensigwart.fakeload.MemoryUnit;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import net.vidageek.mirror.dsl.Mirror;
import org.junit.platform.launcher.Launcher;
import org.junit.platform.launcher.LauncherDiscoveryRequest;
import org.junit.platform.launcher.TestPlan;
import org.junit.platform.launcher.core.LauncherDiscoveryRequestBuilder;
import org.junit.platform.launcher.core.LauncherFactory;
import org.junit.platform.launcher.listeners.SummaryGeneratingListener;
import org.junit.platform.launcher.listeners.TestExecutionSummary;
import org.w3c.dom.Document;
import org.w3c.dom.Element;


public class {{executionTestClassName}} {

  static Object deepClone(Object obj) {
    try {
      ByteArrayOutputStream bo = new ByteArrayOutputStream();
      ObjectOutputStream o = new ObjectOutputStream(bo);
      o.writeObject(obj);

      ByteArrayInputStream bi = new ByteArrayInputStream(bo.toByteArray());
      ObjectInputStream i = new ObjectInputStream(bi);

      return i.readObject();
    } catch (Exception e) {
      return null;
    }
  }

  public static void main(String[] args)
      throws ParserConfigurationException, IOException, ClassNotFoundException {
    int numberOfRun = System.getenv("FLAKY_RUN_NUMBER") != null ? Integer.parseInt(
        System.getenv("FLAKY_RUN_NUMBER")) : 50;
    String testToExecute = System.getenv("FLAKY_TEST_ID");
    int cpuLoad =
        System.getenv("FLAKY_CPU_LOAD") != null ? Integer.parseInt(System.getenv("FLAKY_CPU_LOAD"))
            : 0;
    int memoryLoad = System.getenv("FLAKY_MEMORY_LOAD") != null ? Integer.parseInt(
        System.getenv("FLAKY_MEMORY_LOAD")) : 0;
    int diskInputLoad = System.getenv("FLAKY_DISK_INPUT_LOAD") != null ? Integer.parseInt(
        System.getenv("FLAKY_DISK_INPUT_LOAD")) : 0;
    int diskOutputLoad = System.getenv("FLAKY_DISK_OUTPUT_LOAD") != null ? Integer.parseInt(
        System.getenv("FLAKY_DISK_OUTPUT_LOAD")) : 0;
    String seedRandomTest = System.getenv("FLAKY_RANDOM_SEED");
    boolean isTestOrder = System.getenv("FLAKY_TEST_ORDER") != null && Boolean.parseBoolean(
        System.getenv("FLAKY_TEST_ORDER"));

    Path path = Paths.get("./FLAKY_TEST_OUTPUT");
    try {
      Files.createDirectory(path);
    } catch (IOException exception) {
      Files.walk(path).sorted(Comparator.reverseOrder()).map(Path::toFile).forEach(File::delete);
      Files.createDirectory(path);
    }

    FakeLoad fuzzyLoader = FakeLoads.create().lasting(1, TimeUnit.HOURS).withCpu(cpuLoad)
        .withMemory(memoryLoad, MemoryUnit.MB).withDiskInput(diskInputLoad, MemoryUnit.MB)
        .withDiskOutput(diskOutputLoad, MemoryUnit.MB);
    FakeLoadExecutor executor = FakeLoadExecutors.newDefaultExecutor();
    Future<Void> execution = executor.executeAsync(fuzzyLoader);

    LauncherDiscoveryRequest request;
    SummaryGeneratingListener listener;
    TestExecutionSummary summary;
    Launcher launcher;

    String classUnderTestName = testToExecute.split("#")[0];
    Class classUnderTestObject = Class.forName(classUnderTestName);
    Mirror mirror = new Mirror();
    List<Field> listField = mirror.on(classUnderTestObject).reflectAll().fields();
    List<PairFieldValue> staticFieldValuePairs = listField.stream()
        .filter(f -> Modifier.isStatic(f.getModifiers()))
        .map(field -> new PairFieldValue(field, mirror.on(classUnderTestObject).get().field(field)))
        .collect(Collectors.toList());

    for (int i = 0; i < numberOfRun; i++) {
      launcher = LauncherFactory.create();
      if (isTestOrder) {
        staticFieldValuePairs.forEach(
            fieldValuePair -> mirror.on(classUnderTestObject).set().field(fieldValuePair.getField())
                .withValue(deepClone(fieldValuePair.getStartValue())));
        request = LauncherDiscoveryRequestBuilder.request()
            .selectors(selectClass(testToExecute.split("#")[0]))
            .configurationParameter("junit.jupiter.testmethod.order.default",
                "org.junit.jupiter.api.MethodOrderer$Random")
            .configurationParameter("junit.jupiter.execution.order.random.seed", String.valueOf(i))
            .build();
      } else {
        request = LauncherDiscoveryRequestBuilder.request().selectors(selectMethod(testToExecute))
            .build();
      }
      TestPlan testPlan = launcher.discover(request);
      if (!testPlan.containsTests()) {
      }
      listener = new SummaryGeneratingListener();
      launcher.execute(testPlan, listener);
      summary = listener.getSummary();
      generateXmlOutput(summary, "testFailures-" + i + ".xml");
    }

    execution.cancel(true);
    executor.shutdown();
  }

  private static void generateXmlOutput(TestExecutionSummary summary, String fileName)
      throws ParserConfigurationException {

    final DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
    final DocumentBuilder docBuilder = docFactory.newDocumentBuilder();

    final Document doc = docBuilder.newDocument();
    final Element rootElement = doc.createElement("testfailures");
    rootElement.setAttribute("duration",
        String.valueOf(summary.getTimeFinished() - summary.getTimeStarted()));
    doc.appendChild(rootElement);

    final Pattern pattern = Pattern.compile("\\[class:(.*?)\\]");
    summary.getFailures().forEach(failure -> {
      final Element testcase = doc.createElement("testcase");
      testcase.setAttribute("name", failure.getTestIdentifier().getLegacyReportingName());
      final Matcher matcher = pattern.matcher(failure.getTestIdentifier().getUniqueId());
      if (matcher.find()) {
        testcase.setAttribute("classname", matcher.group(1));
      }
      testcase.setAttribute("displayName", failure.getTestIdentifier().getDisplayName());
      testcase.setAttribute("message", failure.getException().getMessage());
      testcase.setAttribute("stacktrace", Arrays.toString(failure.getException().getStackTrace()));
      rootElement.appendChild(testcase);
    });

    try {

      FileOutputStream output = new FileOutputStream("./FLAKY_TEST_OUTPUT/" + fileName);
      final TransformerFactory transformerFactory = TransformerFactory.newInstance();
      final Transformer transformer = transformerFactory.newTransformer();
      transformer.setOutputProperty(OutputKeys.INDENT, "yes");
      final DOMSource source = new DOMSource(doc);
      final StreamResult result = new StreamResult(output);

      transformer.transform(source, result);
    } catch (Exception e) {
      e.printStackTrace();
    }

  }

  static class PairFieldValue {

    private Field field;
    private Object startValue;

    PairFieldValue(Field field, Object startValue) {
      this.field = field;
      this.startValue = deepClone(startValue);
    }

    Field getField() {
      return field;
    }

    void setField(Field field) {
      this.field = field;
    }

    Object getStartValue() {
      return startValue;
    }

    void setStartValue(Object startValue) {
      this.startValue = startValue;
    }
  }
}
